---
title: "taller4"
author: "Pablo Reyes"
format: html
editor: visual
---

# Taller 4: Transformación de datos y visualización

## Filtros y cargar datos

```{r}
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
```

```{r}


#Datos
agroAPI <- readRDS("C:/Rmdtos/data_raw/data_estaciones_agrometAPI.rds") 
meta_agro <- readRDS("C:/Rmdtos/data_raw/metadata_estaciones_agrometAPI.rds")

#Mascaras 
mascara_agromet <- readRDS("C:/Rmdtos/data_raw/station_id_agromet_Pablo.rds")
mascara_agv <- readRDS("C:/Rmdtos/data_raw/station_id_agv_Pablo.rds")

#Mascaras

#Sets de datos
agv_meta <- readRDS("C:/Rmdtos/data_raw/metadata_estaciones_agvAPI(1).rds")
api_agv <- readRDS("C:/Rmdtos/data_raw/data_agvAPI.rds")

#Aplicación de máscaras
agv_meta <- agv_meta[agv_meta$serial %in% mascara_agv,]
api_agv_rows <- as.numeric(rownames(agv_meta[agv_meta$serial %in% mascara_agv,]))

api_agv_rows <- as.numeric(rownames(agv_meta[agv_meta$tipo == "Humedad_Suelo",]))
api_agv_rows <- api_agv_rows[!is.na(api_agv_rows)]
data <- api_agv[c(api_agv_rows)]

#Filtros

#145 filas estaciones 
#cantidad de variables
cols <- sapply(data,ncol)
vars <- sapply(data,nrow)
# varibles unicas 
vars_un<- unique(vars)
ind785 <- vars%in%c(7,8,5)
data785 <- data[ind785]
# los indicadores de las estaciones que tienen 7 variables

serial_est<- agv_meta$serial[ind785]

# separar para cada caso 
data_sep <- lapply(vars_un,function(x){
  data785[x == vars]
})

#agrupa en una lista las estaciones que tienen la misma cantidad de variables 
#separa los valores unicos

#nombres de variables 
names <-  sapply(data_sep[[1]], purrr::pluck,1)

##primer caso
#seleccionar las tres primeras filas de profundidad
a <- lapply(data_sep[[1]],function(l){
  out <- l |>
    slice(1:3) #selleciona las filas por indice o por nombre
  out$z <- c(90,60,30)
  return(out)
})

# desanidar lo datos
r <- lapply(seq_along(a), function(i){
  out <- tryCatch(
    a[[i]] |>
      tidyr::unnest('data') |>
      tidyr::hoist(3,'value')|>
      dplyr::select(2,3,5) ,
    error = function(e) NULL)
  
  if (!is.null(out)) out$serial <- serial_est[i]
  if (is.list(out)) out <- out |> unnest('value')
  return(out)
})

data_final<- do.call(rbind,r)

data_final<-  rename(data_final, Fecha_Hora = timestamp, valores = value, profundidad =  z)
data_final

```


## 1.Ejercicios funciones

### 1.1Eliminar valores anómalos (40pts)

-   Cree una función nombrada en R que permita tranformar en NA los valores anómalos de una variable `x`, si se encuentra fuera del rango:

$$Q_{25} -1.5\cdot IQR < x < Q_{75}+IQR$$


dónde $Q_{25}$: cuantil $25\%$, $IQR$: rango intercuartil y $Q_{75}$: cuantil $75\%$

La función debe transformar en NA los valores que se encuentran fuera del rango.

-  1.1.1 Pruebe la función con un vector numérico creado por usted.
```{r}
set.seed(123)
x <- c(10,-10,rnorm(100))
hist(x)

lim_inf <- quantile(x,.25) - 1.5*IQR(x)
lim_sup <- quantile(x,.75) + 1.5*IQR(x)

IQR(x)#rango interquartil
quantile(x)


elimi_anomal <- function(x){
  lim_inf <- quantile(x,.25) - 1.5*IQR(x)
  lim_sup <- quantile(x,.75) + 1.5*IQR(x)
  x[x < lim_inf | x > lim_sup] <- NA
  return(x)
}

elimi_anomal(x)

```

- 1.1.2  Pruebe la función utilizando `mutate` con el set de datos `iris`
```{r}
vector1 <- c(rnorm(100, mean = 0, sd = 1))
elimi_anomal(vector1)
```

-  1.1.3 Transforme la función en una función anónima (lambda) y úsela con `mutate` con los datos `iris`
```{r}
#iris |>   
#  mutate(across(is.numeric, elimi_anomal,na.rm = TRUE))
#Tuve problema con el across
```


### 1.2Función para `{dplyr}` (ej., `mutate`) con multiples columnas como argumentos (30 pts)

- 1.2.1  Utilizando el set de datos `iris` y `mutate` haga el calculo en que cada columna numérica sea dividida por la raiz cuadrada de el promedio de `Sepal.Lenght`.
```{r}
rqmean <- mean(sqrt(iris$Sepal.Length))
iris |> 
  mutate(across(is.numeric))/rqmean
```

- 1.2.2  Utilice `across` y `mutate` junto con una función anónima (lambda)
```{r}
iris |> 
  group_by(Species) |>
  mutate(across(where(is.numeric),.fns = \(x) x/rqmean))
```

-1.2.3   Utilice `across` y `mutate` junto con una función nombrada (lambda)
```{r}
rqmeanfun <- function(x,y){group_by(y) |>
    mutate(across(where(is.numeric))) |> 
    mutate(rqmean_ = x/rqmean)}

rqmeanfun(iris$Sepal.Width, iris[iris$Species,])
```

###1.3 Resumir por rangos tipo categórica (50pts)

- 1.3.1  Cree una función que identifique tres grupos para un vector numérico `x`, alto, medio y bajo. Use la función `cut` y rangos de igual tamaño
```{r}
x <- 1:100
clasifica <- function(x,...){
  cut(x,3, labels=c('Low', 'Med', 'High'))}

```

- 1.3.2  Pruebe la función con un vector numérico creado por usted.
```{r}
clasifica(vector1)
```

- 1.3.3  Pruebe la función utilizando `mutate` con el set de datos `iris`
```{r}
iris |>
  mutate(across(where(is.numeric),.fns=clasifica))  
```

- 1.3.4  Transforme la función en una función anónima (lambda) y úsela con `mutate` con los datos `iris`
```{r}
iris |> 
  group_by(Species) |>
  mutate(across(where(is.numeric),.fns = \(x) cut(x, 3, labels = c('Bajo', 'Medio', 'Alto'))))
```

- 1.3.5  Utilice la función para clasificar los set de datos `agromet` en todas las variables climáticas, salvo en `grados_dias` y `horas_frio`, use la función como anónima.
```{r}
meta_agro |>
  group_by(mes = floor_date(fecha_de_alta, '1 month')) |>
  mutate(across(6:8,.fns=clasifica)) 
```

###1.4 Coeficiente de variación (50pts)

-   Cree una función que permita seleccionar las variables numéricas cuyos valores son menores a un coeficiente de variación (CV) de 0.3 (30%).

$$ CV = \frac{\sigma}{\bar{x}}$$

```{r}


cvar <- function(x){
  if(is.numeric(x)){
    x <- na.omit(x)
    cv<- sd(x)/mean(x)
    out <- cv < 0.3
  } else out <- FALSE
  return(out)
}
x <- runif(10)
y <- rnorm(200)
apply(iris[,1:4],2,FUN =cvar)
apply(select(iris, where(is.numeric)),2,FUN=cvar)
cvar(x)
cvar(y)
any(c(TRUE,FALSE,NA),na.rm = TRUE)
iris |>
  select(where(cvar))
```

-1.4.2   Cree una función nombrada y apliquela a un vector aleatorio.
```{r}
vector4 <- runif(10)
cvar(vector4)
```

- 1.4.3  Aplique la función con `apply` a las columnas numéricas del set de datos `iris`
```{r}

apply(iris[,1:4], 2, FUN = cvar)
apply(select(iris,where(is.numeric)),2,FUN =cvar)
```

- 1.4.4  Aplique la función con `where` para seleccionar columnas del set de datos `iris`
```{r}
iris |> 
  select(where(cvar))
```

-  1.4.5 Aplique la función al set de datos agromet en el que se filtraron los valores anómalos.
```{r}
#meta_agro |> mutate(across(everything(),elimi_anomal, na.rm = TRUE)) |>
#  drop_na() |>
#  select(where(cvar))
```

## 2.Ejercicios transformación y visualización

### 2.1Comparar distribuciones (40pts)

-  2.1.1 Compare las distribuciones de datos con y sin los valores anómalos obtenidas en el ejercicio 1.1. Agrúpe las estaciones por región de Chile.
```{r}

data_graf <- agroAPI |> 
  mutate(dia = as_date(fecha_hora)) |> 
  group_by(station_id, dia = as_date(fecha_hora)) |> 
  summarise(across(temp_promedio_aire:temp_maxima,
                   .fns = \(q) sum(is.na(q)),
                   .names = '{.col}_nas'))

data_graf_longer <- data_graf |> 
  pivot_longer(temp_promedio_aire_nas:temp_maxima_nas)

ggplot(data_graf_longer, aes(dia, as.factor(station_id), fill = value))+
  geom_tile() +
  facet_grid(.~name)
```

- 2.1.2  Cree un gráfico para visualizar la densidad de distribución de la precipitación acumulada diaria para las diferentes regiones de Chile. Use gráfico de `densidad` (`geom_density`)
```{r}

```

### 2.2Valores anómalos

-  2.2.1 Visualice la cantidad de NAs implicitos diarios por estación para todas las variables de los datos `agromet`. Utilice gráficos de tipo heatmap (`geom_tile`).
```{r}

```

-  2.2.2 Visualice la cantidad de NAs implicitos diarios por sesnor y profundidad para todas las variables del set de datos ordenados de `agv`. Utilice gráficos de tipo heatmap (`geom_tile`).
```{r}
cols <- sapply(api_agv,ncol)
vars <- sapply(api_agv,nrow)
vars_un<- unique(vars)
ind7 <- vars %in% 7
serial_est<- agv_meta$serial[ind7]
data_sep <- lapply(vars_un,function(x){
  api_agv[x == vars]
})
a <- lapply(data_sep[[1]],function(l){
  out <- l |>
    slice(1:3) #seleciona filas por indice o nombre
  out$z <- c(90,60,30)
  return(out)
})

r <- lapply(seq_along(a), function(i){
  out <- tryCatch(
    a[[i]] |>
      tidyr::unnest('data') |>
      tidyr::hoist(3,'value')|>
      dplyr::select(2,3,5) ,
    error = function(e) NULL)
  
  if (!is.null(out)) out$serial <- serial_est[i]
  if (is.list(out)) out <- out |> unnest('value')
  return(out)
})

agv_final<- do.call(rbind,r)
names <- c('timestamp', 'Valor', 'Profundidad', 'Serial')
names -> colnames(agv_final)

agv_final <- tibble(agv_final)

agv_graf <- agv_final |> 
  mutate(fecha_hora = ymd_hm(timestamp)) |> 
  select(everything()) |> 
  group_by(dia = as_date(fecha_hora), Serial, Profundidad) |> 
  summarise(n = n(),
            NAs = sum(is.na(Valor)),
            NAs_prop = NAs/n)

ggplot(agv_graf, aes(dia, Serial, fill = NAs)) +
  geom_tile() +
  facet_grid(.~Profundidad) +
  scale_x_date(limits = c(ymd(20220831), ymd(20220905)), expand = c(0,0))

```

### 2.3 Variación variables (60pts)

- 2.3.1  Visualice la variación de la temperatura media diaria para todo Chile. Use tipo de gráfico `boxplot` (`geom_boxplot`).
```{r}

  regionA <- agroAPI |> 
  group_by(station_id, dia = as_date(fecha_hora)) |> 
  summarise(temp_prom = mean(temp_promedio_aire, na.rm = TRUE)) |> 
  left_join(meta_agro, by = c('station_id' = 'ema')) |> 
  arrange(desc(latitud))

regionA |> 
  ggplot(aes(region, temp_prom)) +
  geom_boxplot() +
  coord_flip()

```

- 2.3.2  Cree un gráfico en ggplot para visualizar la variación de la temperatura media mensual para las diferentes regiones de Chile. Use tipo de gráfico `scatterplot` (`geom_point`) con barra de error (`geom_error_bar`).
```{r}
region <- agroAPI |> 
  group_by(station_id, dia = as_date(fecha_hora)) |> 
  summarise(temp_prom = mean(temp_promedio_aire, na.rm = TRUE)) |> 
  mutate(mes = floor_date(dia, '1 month')) |> 
  left_join(meta_agro, by = c('station_id' = 'ema')) |> 
  arrange(desc(latitud))

region <- region[,-2] |> 
  group_by(mes)

region |> 
  ggplot(aes(region, temp_prom, dia)) +
  geom_point()

```



